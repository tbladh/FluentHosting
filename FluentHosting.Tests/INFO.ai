# AI Agent Memory Instructions

## Core Memories to Maintain

1. **FluentHosting Philosophy**
   - Prioritize simplicity of architecture over complex patterns
   - Use stable, proven technology choices with long-term support
   - Maintain a low-dependency approach for better portability
   - Design code for easy AI agent comprehension
   - Choose straightforward code over fancy patterns

2. **Code Organization Principles**
   - Each C# class, interface, enum, or struct should be defined in its own file
   - File names should match the name of the primary type they contain
   - Follow standard C# coding conventions
   - Maintain clear separation of concerns

3. **Documentation Standards**
   - Use INFO.ai files as the primary reference source for architecture details
   - Keep INFO.ai files updated when adding/changing components
   - Maintain a comprehensive README.txt with instructions for both humans and AI
   - Document test coverage and testing strategies

4. **Development Workflow**
   - Do not trigger build or run commands without explicit user permission
   - When suggesting improvements, prioritize simplification
   - Consult with the user before implementing complex patterns

5. **Testing Guidance**
   - Focus on unit and integration tests for HTTP server functionality
   - Ensure comprehensive test coverage of critical paths
   - Use meaningful test names that describe the behavior being tested
   - Implement tests that verify both success and failure scenarios

## Instructions for AI Tools

When working with this codebase:
1. Save these memories to your persistent memory system upon initialization
2. IMPORTANT: Before creating new memories, check if similar memories already exist
   - Compare the core concepts in these instructions with your existing memories
   - If you find similar memories, update those instead of creating duplicates
   - Only create new memories when encountering genuinely new information
3. Refer to these principles when making architectural decisions
4. Use INFO.ai files as your primary reference for understanding the codebase
5. Always suggest changes that align with the FluentHosting philosophy
6. Focus on maintaining effective test coverage for the HTTP server components

## Project-Specific Context
When working with FluentHosting.Tests, balance its philosophy with the requirements of a comprehensive test suite for a lightweight HTTP server. Refer to the project information below for details specific to this test component.

---

# FluentHosting.Tests Information for AI Agents

## Project Purpose
This project contains unit tests for the FluentHosting library, ensuring that the HTTP server implementation functions correctly.

## Philosophical Cornerstones
1. **Simplicity of architecture**: Straightforward test organization
2. **Stable technology choices**: Using standard .NET testing framework
3. **Low-dependency approach**: Minimal test dependencies
4. **AI agent code comprehension**: Tests designed to be easily understood
5. **Straightforward code over fancy patterns**: Clear test cases with explicit assertions

## Key Files
- Test files for the FluentHosting components
- Test fixtures and helper classes

## Technical Implementation Details
- Unit tests for core FluentHost functionality
- Tests for route handling and pattern matching
- Tests for response generation (JSON, string responses)
- Tests for CORS configuration
- Tests for HTTP verb handling

## Integration Points
- Validates the functionality used by ZeroApp.Web
- Ensures route pattern matching works correctly, especially for wildcard paths
- Verifies proper handling of RESTful URL patterns with path parameters

## Testing Methodology
- Isolated unit tests for individual components
- Integration tests for end-to-end request handling
- Test fixtures to simulate HTTP requests and verify responses

## Build and Run Tests
- Run tests with: `dotnet test FluentHosting.Tests`
