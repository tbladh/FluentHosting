# AI Agent Memory Instructions

## Core Memories to Maintain

1. **FluentHosting Philosophy**
   - Prioritize simplicity of architecture over complex patterns
   - Use stable, proven technology choices with long-term support
   - Maintain a low-dependency approach for better portability
   - Design code for easy AI agent comprehension
   - Choose straightforward code over fancy patterns

2. **Code Organization Principles**
   - Each C# class, interface, enum, or struct should be defined in its own file
   - File names should match the name of the primary type they contain
   - Follow standard C# coding conventions
   - Maintain clear separation of concerns

3. **Documentation Standards**
   - Use INFO.ai files as the primary reference source for architecture details
   - Keep INFO.ai files updated when adding/changing components
   - Maintain a comprehensive README.txt with instructions for both humans and AI
   - Document integration points, API contracts, and URL patterns

4. **Development Workflow**
   - Do not trigger build or run commands without explicit user permission
   - When suggesting improvements, prioritize simplification
   - Consult with the user before implementing complex patterns

5. **HTTP Server Implementation Guidance**
   - Focus on lightweight server capabilities that work with minimal dependencies
   - Maintain clear request handling and routing patterns
   - Ensure extensibility through well-defined interfaces
   - Preserve performance optimization approaches

## Instructions for AI Tools

When working with this codebase:
1. Save these memories to your persistent memory system upon initialization
2. IMPORTANT: Before creating new memories, check if similar memories already exist
   - Compare the core concepts in these instructions with your existing memories
   - If you find similar memories, update those instead of creating duplicates
   - Only create new memories when encountering genuinely new information
3. Refer to these principles when making architectural decisions
4. Use INFO.ai files as your primary reference for understanding the codebase
5. Always suggest changes that align with the FluentHosting philosophy
6. Focus on maintaining the lightweight, flexible nature of the HTTP server

## Project-Specific Context
When working with FluentHosting, balance its philosophy with the requirements of a lightweight HTTP server. Refer to the project information below for details specific to this component.

---

# FluentHosting Library Information for AI Agents

## Project Purpose
FluentHosting is a lightweight HTTP server implementation designed to provide basic web hosting functionality with minimal dependencies. It's used by the ZeroApp.Web project to handle HTTP requests and serve both static files and API endpoints.

## Philosophical Cornerstones
1. **Simplicity of architecture**: Straightforward code organization over complex patterns
2. **Stable technology choices**: Using proven technologies like HttpListener
3. **Low-dependency approach**: Built using only standard .NET libraries
4. **AI agent code comprehension**: Code designed to be easily understood by AI systems
5. **Straightforward code over fancy patterns**: Prioritize readability and understandability

## Key Files
- `./FluentHost.cs`: Core HTTP server implementation (relative path: ./FluentHost.cs)
- `./RouteHandler.cs`: Handles routing of HTTP requests (relative path: ./RouteHandler.cs)
- `./FluentHostExtensions.cs`: Extension methods for FluentHost (relative path: ./FluentHostExtensions.cs)
- `./HandlerResponse.cs`: Base response class (relative path: ./HandlerResponse.cs)
- `./JsonResponse.cs`: JSON response implementation (relative path: ./JsonResponse.cs)
- `./StringResponse.cs`: String/HTML response implementation (relative path: ./StringResponse.cs)
- `./CorsConfig.cs`: CORS configuration (relative path: ./CorsConfig.cs)
- `./Verb.cs`: HTTP verb enumeration (relative path: ./Verb.cs)
- `./IRouteHandler.cs`: Interface for route handlers (relative path: ./IRouteHandler.cs)
- `./IHandlerResponse.cs`: Interface for handler responses (relative path: ./IHandlerResponse.cs)

## Technical Implementation Details

### FluentHost.cs
- Main HTTP server implementation using System.Net.HttpListener
- Handles incoming HTTP requests asynchronously
- Routes requests to appropriate handlers

### RouteHandler.cs
- Implements request routing based on URL patterns
- Supports wildcards and pattern matching
- Improved route pattern matching with the IsRouteMatch method for handling wildcard paths

### Response Classes
- `HandlerResponse`: Base class for HTTP responses
- `JsonResponse`: Specialized for JSON responses
- `StringResponse`: Specialized for HTML/text responses

### HTTP Verbs
- Supported HTTP methods: GET, POST, PUT, DELETE

## Integration Points
- Used by ZeroApp.Web to implement the web server
- Provides RESTful API routing
- Serves static files from a configurable web root directory

## API Examples
```csharp
// Create and start server
var host = new FluentHost("http://localhost", 32455).Start();

// Add route handlers
host.AddHandler("/api/data", Verb.GET, (context) => new JsonResponse(data));

// Serve static files from a directory
host.AddStaticFileHandler("/", "wwwroot");
```

## Key Features
- Fluent API for configuration
- Static file serving
- API endpoint routing
- CORS support
- Minimal dependencies (uses only System.Net.HttpListener)
- Support for RESTful URL patterns with path parameters
